@page "/"
@page "/login"
@using VagtplanApp.Shared.Model;
@using VagtplanApp.Client.Shared;
@using VagtplanApp.Client.Services;
@inject HttpClient Http;
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject NavigationManager NavigationManager

<h3>Log ind</h3>

<!-- Viser fejlmeddelse ved forkert login -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<!-- Formular til login. Brugerens indtastede oplysninger bindes til 'logInPerson' -->
<EditForm Model="@logInPerson" OnValidSubmit="@AuthenticateLogin">
    <DataAnnotationsValidator /> <!--vores form kan læse annotations som [Required] og [EmailAddress] fra vores klasser-->
    <ValidationSummary /> <!--Skriver fejlen fra annotations-->

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@logInPerson.email" />
    </div>

    <div class="form-group">
        <label for="password">Adgangskode:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="@logInPerson.password" />
    </div>

    <button type="submit" class="btn btn-primary">Log ind</button>

</EditForm>

<!-- Knap til opret bruger -->
<button class="btn btn-secondary" @onclick="ShowModal">Opret bruger</button>

<!-- Åbner ModalDialog for opret person -->
<ModalDialog @ref="modalRef" Title="Opret ny person">
    <EditForm Model="@newPerson" OnValidSubmit="@CreatePerson">
        <DataAnnotationsValidator />
        <ValidationSummary />


        <div class="form-group">
            <label for="newEmail">E-mail:</label>
            <InputText id="newEmail" class="form-control" @bind-Value="@newPerson.email" required />
        </div>

        <div class="form-group">
            <label for="newAdgangskode">Adgangskode:</label>
            <InputText id="newAdgangskode" type="password" class="form-control" @bind-Value="@newPerson.password" required />
        </div>

        <div class="form-group">
            <label for="tlfnr">Telefonnummer:</label>
            <InputNumber id="tlfnr" class="form-control" @bind-Value="@newPerson.phonenumber" required/>

        </div>

        <div class="form-group">
            <label for="forNavn">Fornavn:</label>
            <InputText id="forNavn" class="form-control" @bind-Value="@newPerson.firstName" required />
        </div>

        <div class="form-group">
            <label for="efterNavn">Efternavn:</label>
            <InputText id="efterNavn" class="form-control" @bind-Value="@newPerson.lastName" required />
        </div>

        <div class="form-group">
            <label for="fødselsDato">Fødselsdato:</label>
            <InputDate id="fødselsDato" class="form-control" @bind-Value="@newPerson.birthdate" required />
        </div>

        <div class="form-group">
            <label for="køn">Køn:</label>
            <InputSelect id="køn" class="form-control" @bind-Value="@newPerson.gender" required>
                <option value="">Vælg køn...</option>
                <option value="Mand">Mand</option>
                <option value="Kvinde">Kvinde</option>
                <option value="Andet">Andet</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="rolle">Rolle:</label>
            <InputRadioGroup id="rolle" class="form-control" @bind-Value="@newPerson.isKoordinator" required>
                <InputRadio id="isFrivillig" Value="false" /> Frivillig
                <InputRadio is="isKoordinator" Value="true" /> Koordinator
            </InputRadioGroup>
        </div>

        <button type="submit" class="btn btn-success">Opret</button>
    </EditForm>
</ModalDialog>

@code {
    private Person newPerson = new Person(); // Objekt for ny opretter person
    private Person logInPerson = new Person(); // Objekt for bruger som logger ind
    private ModalDialog modalRef { get; set; } // Objekt for ModalDialog hvor man ændre data
    private string errorMessage = string.Empty; // Tilføjet for fejlhåndtering

    [Inject] // Henter service-klassen
    private IPersonService mService { get; set; }

    // Funktion for opret person
    private async Task CreatePerson()
    {
        await mService.AddPerson(newPerson);
        newPerson = new Person();
        modalRef.Close();
    }

    // Åbner modal-komponent
    private void ShowModal()
    {
        modalRef.Open();
    }

    // Funktion for log-in
    private async Task AuthenticateLogin()
    {
        // Kalder vores Authenticate metode
        var user = await mService.Authenticate(logInPerson.email, logInPerson.password);

        if (user != null)
        {
            // Gemmer brugerdata i local storage og navigerer til relavant side efter brugerrolle
            await localStore.SetItemAsync("currentUser", user);
            mService.SetCurrentUser(user);
            NavigationManager.NavigateTo(user.isKoordinator ? "/coordinator-all-shifts" : "/volunteer-my-shifts");
        }
        else
        {
            // Håndterer fejl ved login
            errorMessage = "Ugyldig email eller adgangskode.";
        }
    }
}
