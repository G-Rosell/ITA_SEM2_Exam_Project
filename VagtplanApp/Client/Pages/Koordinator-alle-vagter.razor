@page "/koordinator-oversigt"
@using VagtplanApp.Shared.Model


<h1 class="mb-3 mt-3">Oversigt over vagter</h1>

<table class="table table-striped center-text"> <!-- center-text == centrerer al indhold-->
    <!-- Viser tabel over alle vagter, med CRUD muligheder -->
    <thead>
        <tr>
            <th>Dato</th>
            <th>Start Tid</th>
            <th>Slut Tid</th>
            <th>Antal Personer<a class="oi oi-sort-ascending" @onclick="SortByAssignment"></a></th>
            <th>Prioritet<a class="oi oi-sort-ascending" @onclick="SortPriority"></a></th>
            <th>Rediger Vagt</th>
            <th>Lås Vagt</th>
            <th>Slet Vagt</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var shift in shiftList)
        {
            <tr>
                <td>@shift.date.ToString("dd:MM")</td>
                <td>@shift.startTime.ToString("HH:mm")</td>
                <td>@shift.endTime.ToString("HH:mm")</td>
                <td>@shift.assignedPersons.Count/@shift.numberOfPersons</td>
                <td>@shift.priority</td>
                <td> <button class="btn btn-outline-secondary" @onclick="() => ShowModal(shift)">Rediger oplysninger</button></td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="() => ToggleLock(shift)">
                        @if (shift.IsLocked)
                        {
                            <span>Lås op</span>
                        }
                        else
                        {
                            <span>Lås</span>
                        }
                    </button>
                </td>
                <td> <button class="btn btn-outline-danger" @onclick="() => DeleteShift(shift.id)">Slet denne vagt</button> </td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal-komponent for redigér vagt -->
<ModalDialog @ref="modalRef" Title="Rediger oplysninger">
    <EditForm Model="@updatedShift" OnValidSubmit="@UpdateShiftDetails">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Viser fejlmeddelse ved ugyldig tid på vagt -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <div class="col-md-6 mb-3">
            <label for="dato">Dato</label>
            <input type="date" id="dato" @bind="updatedShift.date" class="form-control" required />
        </div>
        <div class="col-md-6 mb-3">
            <label for="start-dato">Start tid</label>
            <input type="time" id="start-dato" @bind="updatedShift.startTime" class="form-control" required />
        </div>
        <div class="col-md-6 mb-3">
            <label for="slut-dato">Slut tid</label>
            <input type="time" id="slut-dato" @bind="updatedShift.endTime" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="antalPersoner">Antal Personer</label>
            <InputNumber id="AntalPersoner" @bind-Value="updatedShift.numberOfPersons" class="form-control" required />
        </div>
        <div class="col-md-6 mb-3">
            <label for="prioriity">Prioritet</label>
            <select id="priority" @bind="updatedShift.priority" class="form-control">
                <option value="Lav">Lav</option>
                <option value="Normal">Normal</option>
                <option value="Høj">Høj</option>
            </select>
        </div>

        <div class="col-12 mb-3">
            <button type="submit" class="btn btn-primary">Opdater</button>
        </div>

    </EditForm>
</ModalDialog>

@code {
    // Fields:
    private List<Shift> shiftList = new List<Shift>();
    private Shift updatedShift = new Shift();
    private ModalDialog modalRef { get; set; }
    private string errorMessage = string.Empty; // Tilføjet for fejlhåndtering

    [Inject] // Henter service-klassen
    private IShiftService mService { get; set; }
    private bool sortByPriority = false;
    private bool sortByAssignment = false;

    // Henter alle vagter ved indlæsning af side
    protected override async Task OnInitializedAsync()
    {
        shiftList = (await mService.GetAllShifts());
    }

    // Åbner modal-komponent
    private void ShowModal(Shift shift)
    {
        updatedShift = shift; // Her forudfyldes formularen med den valgte vagt
        modalRef.Open();
    }

    // Opdaterer vagtoplysninger efter redigering og lukker modalen.
    private async Task UpdateShiftDetails()
    {
        if (updatedShift.startTime >= updatedShift.endTime)
        {
            errorMessage = "Starttiden skal være før sluttiden.";
            return;
        }

        await mService.UpdateShift(updatedShift); // Antager at denne metode eksisterer og opdaterer en vagt
        modalRef.Close();

        // Opdater shiftList for at vise de nye ændringer
        shiftList = await mService.GetAllShifts();
    }

    // Funktion for at sorterer efter prioritet
    private void SortPriority()
    {
        sortByPriority = !sortByPriority;
        shiftList = mService.GetSortedShifts(shiftList, sortByPriority);
    }

    // 
    private void SortByAssignment()
    {
        sortByAssignment = !sortByAssignment;
        shiftList = mService.GetShiftsSortedByAssignment(shiftList);
    }

    // Funktion for at slette vagt
    private async Task DeleteShift(string shiftId)
    {
        await mService.DeleteShift(shiftId);

        // Opdater shiftList for at vise de nye ændringer
        shiftList = await mService.GetAllShifts();
    }

    // Funktion for at låse en vagt
    private async Task ToggleLock(Shift shift)
    {
        shift.IsLocked = !shift.IsLocked;
        await mService.UpdateShift(shift); // Opdater vagten
    }
}
