@page "/frivillig-profil"
@using VagtplanApp.Client.Services;
@inject Blazored.LocalStorage.ILocalStorageService localStore


<h3>Frivillig Profil</h3>

@if (currentUser == null)
{
    <p>Brugeren er ikke logget ind.</p>
}
else
{
    <div>
        <p><strong>Fornavn:</strong> @currentUser.firstName</p>
        <p><strong>Efternavn:</strong> @currentUser.lastName</p>
        <p><strong>Telefonnummer:</strong> @currentUser.phonenumber</p>
        <p><strong>Email:</strong> @currentUser.email</p>
        <p><strong>Fødselsdato:</strong> @currentUser.birthdate</p>
        <p><strong>Køn:</strong> @currentUser.gender</p>
        <p><strong>Rolle:</strong> @(currentUser.isKoordinator ? "Koordinator" : "Frivillig")</p>
    </div>

    <button class="btn btn-secondary" @onclick="ShowModal">Rediger oplysninger</button>

    <ModalDialog @ref="modalRef" Title="Rediger oplysninger">
        <EditForm Model="@UpdateUserDetails" OnValidSubmit="@UpdateUserDetails">
            <DataAnnotationsValidator />
            <ValidationSummary />


            <div class="form-group">
                <label for="updatedEmail">E-mail:</label>
                <InputText id="updatedEmail" class="form-control" @bind-Value="@updatedPerson.email" required />
            </div>
            <div class="form-group">
                <label for="newAdgangskode">Adgangskode:</label>
                <InputText id="newAdgangskode" type="password" class="form-control" @bind-Value="@updatedPerson.password" required />
            </div>
            <div class="form-group">
                <label for="tlfnr">Telefonnummer:</label>
                <InputNumber id="tlfnr" class="form-control" @bind-Value="@updatedPerson.phonenumber" required />
            </div>


            <button type="submit" class="btn btn-success">Opdater</button>
        </EditForm>
    </ModalDialog>
}

@code {
    private Person updatedPerson = new Person();
    private ModalDialog modalRef { get; set; }
    private Person currentUser;


    [Inject]
    private IPersonService mService { get; set; }


    // 
    protected override async Task OnInitializedAsync()
    {
        currentUser = await localStore.GetItemAsync<Person>("currentUser");
        Console.WriteLine($"Current user loaded: {currentUser?.email}");
        updatedPerson = new Person { id = currentUser.id }; // Kopier relevant data fra currentUser
    }

    // 
    private void ShowModal()
    {
        // Kopierer den nuværende brugers data til updatedPerson objektet == udfylder modalDialog med information
        updatedPerson = new Person
        {
            email = currentUser.email,
            password = currentUser.password,
            phonenumber = currentUser.phonenumber,
        };
        modalRef.Open();
    }

    // 
    private async Task UpdateUserDetails()
    {
        // Opdaterer CurrentUser med de nye oplysninger
        currentUser.email = updatedPerson.email;
        currentUser.password = updatedPerson.password;
        currentUser.phonenumber = updatedPerson.phonenumber;

        Console.WriteLine($"Attempting to update user: {updatedPerson.id}"); // tester i konsol
        // Gemmer den opdaterede bruger i local storage
        await localStore.SetItemAsync("currentUser", currentUser);
        await mService.UpdatePerson(currentUser);
        modalRef.Close();
    }
}
