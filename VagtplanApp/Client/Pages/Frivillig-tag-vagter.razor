@page "/frivillig-tag-vagter"
@using VagtplanApp.Client.Services


<h3>Vælg Vagter</h3>

<!-- Viser labels for tabel -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Dato</th>
            <th>Start tid</th>
            <th>Slut tid</th>
            <th>Antal personer (tildelt/total)</th>
            <th>Prioritet</th>
            <th>Tag vagt</th>
        </tr>

    </thead>
    <tbody>

        <!-- Henter indhold til tabel -->
        @foreach (var shift in shiftList)
        {
            <tr>
                <td>@shift.date.ToString("dd:MM")</td>
                <td>@shift.startTime.ToString("HH:mm")</td>
                <td>@shift.endTime.ToString("HH:mm")</td>
                <td>@shift.assignedPersons.Count/@shift.numberOfPersons</td>
                <td>@shift.priority</td>
                <td> <svg xmlns="http://www.w3.org/2000/svg" @onclick="() => TakeShift(shift.id)" width="25" height="25" viewBox="0 0 8 8"><path fill="currentColor" d="M4 0C1.79 0 0 1.79 0 4s1.79 4 4 4s4-1.79 4-4s-1.79-4-4-4zm2 1.78l.72.72L3.5 5.72L1.78 4l.72-.72l1 1L6 1.78z" /></svg> </td>
            </tr>

        }
        </tbody>
</table>

<!-- Viser fejl hvis dobbelt-valg af vagt i samme tidsrum -->
@if (showError)
{
    <div class="error-popup">
        <p>@errorMessage</p>
        <button @onclick="HideError">Luk</button>
    </div>
}


@code {
    private bool showError = false;
    private string errorMessage = "";


    private void HideError()
    {
        showError = false;
        errorMessage = "";
    }

    private List<Shift> shiftList = new List<Shift>();

    [Inject]
    private IShiftService mService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        shiftList = (await mService.GetAllShifts()).OrderByDescending(s => s.priority).ToList(); // OrderByDescending her initialisere vi listen af shifts og sortere efter prioritet
        StateHasChanged(); // For at opdatere UI
    }

    private async Task TakeShift(string shiftId)
    {
        var result = await mService.TryTakeShift(shiftId);
        switch (result)
        {
            case "FullyBooked":
                errorMessage = "Fejl! Vagten er allerede fuldt bemandet.";
                showError = true;
                break;
            case "TimeOverlap":
                errorMessage = "Fejl! Du har allerede en vagt i dette tidsrum.";
                showError = true;
                break;
            case "Success":
                OnInitializedAsync(); // Opdaterer listen over vagter
                break;
            default:
                errorMessage = "Der opstod en ukendt fejl.";
                showError = true;
                break;
        }
    }
}

