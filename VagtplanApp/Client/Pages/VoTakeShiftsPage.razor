@page "/volunteer-take-shifts"

<h3>Vælg Vagter</h3>

<!-- Viser labels for tabel -->
<table class="table table-striped center-text"> <!-- center-text == centrerer al indhold-->
    <thead>
        <tr>
            <th>Dato</th>
            <th>Start tid</th>
            <th>Slut tid</th>
            <th>Antal Personer<a class="oi oi-sort-ascending" @onclick="SortByAssignment"></a></th>
            <th>Prioritet<a class="oi oi-sort-ascending" @onclick="SortPriority"></a></th>
            <th>Tag vagt</th>
        </tr>

    </thead>
    <tbody>

        <!-- Henter indhold til tabel -->
        @foreach (var shift in shiftList)
        {
            <tr>
                <td>@shift.date.ToString("dd:MM")</td>
                <td>@shift.startTime.ToString("HH:mm")</td>
                <td>@shift.endTime.ToString("HH:mm")</td>
                <td>@shift.assignedPersons.Count/@shift.numberOfPersons</td>
                <td>@shift.priority</td>
                <td> <svg xmlns="http://www.w3.org/2000/svg" @onclick="() => TakeShift(shift.id)" width="25" height="25" viewBox="0 0 8 8"><path fill="currentColor" d="M4 0C1.79 0 0 1.79 0 4s1.79 4 4 4s4-1.79 4-4s-1.79-4-4-4zm2 1.78l.72.72L3.5 5.72L1.78 4l.72-.72l1 1L6 1.78z" /></svg> </td>
            </tr>

        }
    </tbody>
</table>

<!-- Viser fejl hvis dobbelt-valg af vagt i samme tidsrum -->
@if (showError)
{
    <div class="error-popup">
        <p>@errorMessage</p>
        <button @onclick="HideError">Luk</button>
    </div>
}


@code {
    private List<Shift> shiftList = new List<Shift>(); // Liste af vagter
    private string errorMessage = ""; // String for fejlbesked
    private bool showError = false; // bool for om fejl skal vises
    private bool sortByPriority = false; // bool for sortering af prioritet
    private bool sortByAssignment = false; // bool for sortering af antal personer til vagt
    private void HideError() // Lukker fejlmeddelelse
    {
        showError = false;
        errorMessage = "";
    }

    [Inject] // Henter service-klassen
    private IShiftService mService { get; set; }

    // Henter og sorterer listen af tilgængelige vagter ved indlæsning af siden.
    protected override async Task OnInitializedAsync()
    {
        // Initialiserer listen af shifts og sortere efter prioritet
        shiftList = (await mService.GetAllShifts()).OrderByDescending(s => s.priority).ToList();
        StateHasChanged(); // Opdaterer UI
    }

    // Funktion for at sorterer efter prioritet
    private void SortPriority()
    {
        sortByPriority = !sortByPriority;
        shiftList = mService.GetSortedShifts(shiftList, sortByPriority);
    }

    // 
    private void SortByAssignment()
    {
        sortByAssignment = !sortByAssignment;
        shiftList = mService.GetShiftsSortedByAssignment(shiftList);
    }

    // Håndterer logikken for at tage en vagt og opdatere UI baseret på resultatet.
    private async Task TakeShift(string shiftId)
    {
        var result = await mService.TryTakeShift(shiftId);
        switch (result)
        {
            case "FullyBooked":
                errorMessage = "Fejl! Vagten er allerede fuldt bemandet.";
                showError = true;
                break;
            case "TimeOverlap":
                errorMessage = "Fejl! Du har allerede en vagt i dette tidsrum.";
                showError = true;
                break;
            case "Success":
                OnInitializedAsync(); // Opdaterer listen over vagter
                break;
            default:
                errorMessage = "Der opstod en ukendt fejl.";
                showError = true;
                break;
        }
    }
}
